    True,
   'postprocessors': [{
    'key': 'FFmpegVideoConvertor',
    'preferedformat': 'mp4'
   }],
   'outtmpl':
    '%(id)s.mp4',
   'logtostderr':
    False,
   'quiet':
    True
  }
  song = False
  video = True
 try:
  await utils.answer(m, self.strings("downloading", m))
  with YoutubeDL(opts) as rip:
   rip_data = rip.extract_info(url)
 except DownloadError as DE:
  return await utils.answer(m, self.strings("err", m).format(str(DE)))
 except ContentTooShortError:
  return await utils.answer(m, self.strings("content_too_short", m))
 except GeoRestrictedError:
  return await utils.answer(m, self.strings("geoban", m))
 except MaxDownloadsReached:
  return await utils.answer(m, self.strings("maxdlserr", m))
 except PostProcessingError:
  return await utils.answer(m, self.strings("pperr", m))
 except UnavailableVideoError:
  return await utils.answer(m, self.strings("noformat", m))
 except XAttrMetadataError as XAME:
  return await utils.answer(m, self.strings("xameerr", m).format(XAME))
 except ExtractorError:
  return await utils.answer(m, self.strings("exporterr", m))
 except Exception as e:
  return await utils.answer(m, self.strings("err2", m).format(str(type(e)), str(e)))
 if song:
  u = rip_data['uploader'] if 'uploader' in rip_data else 'Northing'
  await utils.answer(m,
                     open(f"{rip_data['id']}.mp3", "rb"),
                     supports_streaming=True,
                     reply_to=reply.id if reply else None,
                     attributes=[
                      DocumentAttributeAudio(duration=int(rip_data['duration']),
                                             title=str(rip_data['title']),
                                             performer=u)
                     ]
                     )
  os.remove(f"{rip_data['id']}.mp3")
 elif video:
  await utils.answer(m,
                     open(f"{rip_data['id']}.mp4", "rb"),
                     reply_to=reply.id if reply else None,
                     supports_streaming=True,
                     caption=rip_data['title']
                     )
  os.remove(f"{rip_data['id']}.mp4")

import io
import math
import urllib.request

from PIL import Image
from telethon.tl.types import DocumentAttributeFilename, MessageMediaPhoto

from userbot import CMD_HELP, bot
from userbot.events import register

PACK_FULL = "–ß–µ–ª, –ø–∞–∫ –ø–æ–ª–æ–Ω. 120 —Å—Ç–∏–∫–µ—Ä–æ–≤ - –ø—Ä–µ–¥–µ–ª –≤ —Ç–µ–ª–µ–∂–∫–µ. –ü–æ—Ä–∞ –¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π)))"


@register(outgoing=True, pattern="^.kang")
async def kang(args):
    """ –î–ª—è .kang –∫–æ–º–∞–Ω–¥—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å—Ç–∏–∫–µ—Ä """
    user = await bot.get_me()
    if not user.username:
        user.username = user.first_name
    message = await args.get_reply_message()
    photo = None
    emojibypass = False
    is_anim = False
    emoji = ""
    await args.edit("`–ü–æ—à–ª–∞ —Ä–æ–¥–∏–º–∞—è...`")
    if message and message.media:
        if isinstance(message.media, MessageMediaPhoto):
            photo = io.BytesIO()
            photo = await bot.download_media(message.photo, photo)
        elif "image" in message.media.document.mime_type.split('/'):
            photo = io.BytesIO()
            await bot.download_file(message.media.document, photo)
            if (DocumentAttributeFilename(file_name='sticker.webp') in
                    message.media.document.attributes):
                emoji = message.media.document.attributes[1].alt
                emojibypass = True
        elif (DocumentAttributeFilename(file_name='AnimatedSticker.tgs') in
              message.media.document.attributes):
            emoji = message.media.document.attributes[0].alt
            emojibypass = True
            is_anim = True
            photo = 1
        else:
            await args.edit("`–ò–¥–∏ –Ω–∞—Ö—É–π - –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —è —Ç–∞–∫–æ–µ`")
            return
    else:
        await args.edit("`–†–µ–ø–ª–∞–π –Ω–∞ —Ñ–æ—Ç–æ —Å–¥–µ–ª–∞–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞`")
        return

    if photo:
        splat = args.text.split()
        if not emojibypass:
            emoji = "ü§î"
        pack = 1
        if len(splat) == 3:
            pack = splat[2]  
            emoji = splat[1]
        elif len(splat) == 2:
            if splat[1].isnumeric():
                pack = int(splat[1])
            else:
                emoji = splat[1]

        packname = f"a{user.id}_by_{user.username}_{pack}"
        packnick = f"@{user.username}'s userbot pack {pack}"
        cmd = '/newpack'
        file = io.BytesIO()

        if not is_anim:
            image = await resize_photo(photo)
            file.name = "sticker.png"
            image.save(file, "PNG")
        else:
            packname += "_anim"
            packnick += " animated"
            cmd = '/newanimated'

        response = urllib.request.urlopen(
            urllib.request.Request(f'http://t.me/addstickers/{packname}'))
        htmlstr = response.read().decode("utf8").split('\n')

        if "  A <strong>Telegram</strong> user has created the <strong>Sticker&nbsp;Set</strong>." not in htmlstr:
            async with bot.conversation('Stickers') as conv:
                await conv.send_message('/addsticker')
                await conv.get_response()
                # Ensure user doesn't get spamming notifications
                await bot.send_read_acknowledge(conv.chat_id)
                await conv.send_message(packname)
                x = await conv.get_response()
                while x.text == PACK_FULL:
                    pack += 1
                    packname = f"a{user.id}_by_{user.username}_{pack}"
                    packnick = f"@{user.username}'s userbot pack {pack}"
                    await args.edit("`Switching to Pack " + str(pack) +
                                    " due to insufficient space`")
                    await conv.send_message(packname)
                    x = await conv.get_response()
                    if x.text == "Invalid pack selected.":
                        await conv.send_message(cmd)
                        await conv.get_response()
                        await bot.send_read_acknowledge(conv.chat_id)
                        await conv.send_message(packnick)
                        await conv.get_response()
                        await bot.send_read_acknowledge(conv.chat_id)
                        if is_anim:
                            await bot.forward_messages('Stickers',
                                                       [message.id],
                                                       args.chat_id)
                        else:
                            file.seek(0)
                            await conv.send_file(file, force_document=True)
                        await conv.get_response()
                        await conv.send_message(emoji)
                        # Ensure user doesn't get spamming notifications
                        await bot.send_read_acknowledge(conv.chat_id)
                        await conv.get_response()
                        await conv.send_message("/publish")
                        if is_anim:
                            await conv.get_response()
                            await conv.send_message(f"<{packnick}>")
                        await conv.get_response()
                        await bot.send_read_acknowledge(conv.chat_id)
                        await conv.send_message("/skip")
                        await bot.send_read_acknowledge(conv.chat_id)
                        await conv.get_response()
                        await conv.send_message(packname)
                        await bot.send_read_acknowledge(conv.chat_id)
                        await conv.get_response()
                        await bot.send_read_acknowledge(conv.chat_id)
                        await args.edit(
                            f"–°—Ç–∏–∫–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞—Ö—É–µ–Ω–Ω—ã–π –ø–∞–∫. –ü–∞–∫ —Å–æ–∑–¥–∞–Ω —Å–µ–π—á–∞—Å. –ú–æ–∂–µ—à—å –µ–≥–æ –Ω–∞–π—Ç–∏ —Ç—É—Ç [here](t.me/addstickers/{packname})",
                            parse_mode='md')
                        return
                if is_anim:
                    await bot.forward_messages('Stickers', [message.id],
                                               args.chat_id)
                else:
                    file.seek(0)
                    await conv.send_file(file, force_document=True)
                await conv.get_response()
                await conv.send_message(emoji)
                await bot.send_read_acknowledge(conv.chat_id)
                await conv.get_response()
                await conv.send_message('/done')
                await conv.get_response()
                await bot.send_read_acknowledge(conv.chat_id)
        else:
            await args.edit("–¢—É—Ç –¥–æ–ª–∂–µ–Ω –±—ã–ª –±—ã—Ç—å –∞—Ä–≥–µ–º–µ–Ω—Ç –ø—Ä–æ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ –∏ —Ç–ø, –Ω–æ –º–Ω–µ –ª–µ–Ω—å –ø–∏—Å–∞—Ç—å - –∫—Ä—á —Å–æ–∑–¥–∞–π –Ω–æ–≤—ã–π")
            async with bot.conversation('Stickers') as conv:
                await conv.send_message(cmd)
                await conv.get_response()
                await bot.send_read_acknowledge(conv.chat_id)
                await conv.send_message(packnick)
                await conv.get_response()
                await bot.send_read_acknowledge(conv.chat_id)
                if is_anim:
                    await bot.forward_messages('Stickers', [message.id],
                                               args.chat_id)
                else:
                    file.seek(0)
                    await conv.send_file(file, force_document=True)
                await conv.get_response()
                await conv.send_message(emoji)
                await bot.send_read_acknowledge(conv.chat_id)
                await conv.get_response()
                await conv.send_message("/publish")
                if is_anim:
                    await conv.get_response()
                    await conv.send_message(f"<{packnick}>")
                await conv.get_response()
                await bot.send_read_acknowledge(conv.chat_id)
                await conv.send_message("/skip")
                await bot.send_read_acknowledge(conv.chat_id)
                await conv.get_response()
                await conv.send_message(packname)
                await bot.send_read_acknowledge(conv.chat_id)
                await conv.get_response()
                await bot.send_read_acknowledge(conv.chat_id)

        await args.edit(
            f"–°—Ç–∏–∫–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω. –ü–∞–∫ —Ç—É—Ç–∞. –ú—É—Ä [here](t.me/addstickers/{packname})",
            parse_mode='md')


async def resize_photo(photo):
    """ Resize the given photo to 512x512 """
    image = Image.open(photo)
    maxsize = (512, 512)
    if (image.width and image.height) < 512:
        size1 = image.width
        size2 = image.height
        if image.width > image.height:
            scale = 512 / size1
            size1new = 512
            size2new = size2 * scale
        else:
            scale = 512 / size2
            size1new = size1 * scale
            size2new = 512
        size1new = math.floor(size1new)
        size2new = math.floor(size2new)
        sizenew = (size1new, size2new)
        image = image.resize(sizenew)
    else:
        image.thumbnail(maxsize)

    return image


CMD_HELP.update({
    "kang":
    ".kang\n"
    "Usage: –°–¥–µ–ª–∞–π —Ä–µ–ø–ª–∞–π .kang –Ω–∞ —Ñ–æ—Ç–æ –∏–ª–∏ —Å—Ç–∏–∫–µ—Ä –∏ –æ–Ω –±—É–¥–µ—Ç –≤ —Ç–≤–æ–µ–º –º—è—É–ø–∞–∫–µ"
})

CMD_HELP.update({
    "kang":
    ".kang [emoji('s)]\n"
    "Usage: –†–∞–±–æ—Ç–∞–µ—Ç —Å  .kang –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–≤–æ–π —Å–º–∞–π–ª –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞."
})

CMD_HELP.update({
    "kang":
    ".kang [number]\n"
    "Usage: –°—Ç–∏–∫–µ—Ä–∏–∑–∞—Ü–∏—è —Å—Ç–∏–∫–µ—Ä–∞/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ü§î –∫–∞–∫ —ç–º–æ–¥–∂–∏."
})
